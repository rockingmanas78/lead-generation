generator client {
  provider        = "prisma-client-py"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model Plan {
  id       String        @id @default(uuid())
  code     String        @unique
  name     String
  versions PlanVersion[]
}

model PlanVersion {
  id             String         @id @default(uuid())
  planId         String
  version        Int
  zone           ZoneCode
  bucket         Experiment
  cadence        BillingCadence
  currency       String
  basePriceCents Int
  createdAt      DateTime       @default(now())
  components     Component[]
  Plan           Plan           @relation(fields: [planId], references: [id])
  prices         PriceId[]

  @@unique([planId, zone, bucket, cadence, version])
}

model Component {
  id            String      @id @default(uuid())
  planVersionId String
  metric        MeterMetric
  includedQty   Int
  capPeriod     CapPeriod
  overageCents  Int
  PlanVersion   PlanVersion @relation(fields: [planVersionId], references: [id])
}

model PriceId {
  id              String      @id @default(uuid())
  planVersionId   String
  gateway         String
  price           Int
  externalPriceId String
  PlanVersion     PlanVersion @relation(fields: [planVersionId], references: [id])
}

model Tenant {
  id                 String               @id @default(uuid())
  name               String
  plan               PlanType             @default(FREE)
  createdAt          DateTime             @default(now())
  countryCode        String?
  zone               ZoneCode             @default(IN)
  deletedAt          DateTime?
  bulkEmailJobs      BulkEmailJob[]
  BulkSnippet        BulkSnippet[]
  CompanyProfile     CompanyProfile?
  DomainIdentity     DomainIdentity[]
  campaigns          EmailCampaign[]
  emailLogs          EmailLog[]
  templates          EmailTemplate[]
  Feedback           Feedback[]
  KnowledgeDocument  KnowledgeDocument[]
  leads              Lead[]
  jobs               LeadGenerationJob[]
  PaymentTransaction PaymentTransaction[]
  TenantOnboarding   TenantOnboarding?
  users              User[]
  WebsiteContent     WebsiteContent[]
}

model Subscription {
  id                 String               @id @default(uuid())
  tenantId           String
  planVersionId      String
  zone               ZoneCode
  status             String
  currentStart       DateTime
  currentEnd         DateTime
  brokerId           String?
  PaymentTransaction PaymentTransaction[]
}

model UsageEvent {
  id         BigInt      @id @default(autoincrement())
  tenantId   String
  metric     MeterMetric
  qty        Int
  recordedAt DateTime    @default(now())

  @@index([tenantId, recordedAt])
}

model DailyCapCounter {
  tenantId String
  date     DateTime
  metric   MeterMetric
  qty      Int

  @@id([tenantId, date, metric])
}

model CampaignLead {
  id         String        @id @default(uuid())
  campaignId String
  leadId     String
  createdAt  DateTime      @default(now())
  campaign   EmailCampaign @relation(fields: [campaignId], references: [id])
  lead       Lead          @relation(fields: [leadId], references: [id])

  @@unique([campaignId, leadId])
}

model User {
  id           String    @id @default(uuid())
  tenantId     String
  email        String    @unique
  passwordHash String
  role         UserRole  @default(MANAGER)
  verified     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  tenant       Tenant    @relation(fields: [tenantId], references: [id])
}

model Lead {
  id                String             @id @default(uuid())
  tenantId          String
  companyName       String
  contactEmail      String[]
  contactName       String?
  contactPhone      String[]
  status            LeadStatus         @default(FOLLOW_UP)
  confidence        Float?
  metadata          Json?
  createdAt         DateTime           @default(now())
  deletedAt         DateTime?
  contactAddress    String[]
  source            lead_source        @default(AI_GENERATED)
  linkedInUrl       String?            @unique
  companySize       Int?               @default(0)
  jobId             String?
  bulkEmailJobLeads BulkEmailJobLead[]
  campaignLeads     CampaignLead[]
  emailLogs         EmailLog[]
  LeadGenerationJob LeadGenerationJob? @relation(fields: [jobId], references: [id])
  tenant            Tenant             @relation(fields: [tenantId], references: [id])

  @@unique([jobId, contactEmail], map: "Lead_jobId_email_key")
  @@index([tenantId, status])
  @@index([jobId])
}

model DomainIdentity {
  id                 String          @id @default(uuid())
  tenantId           String
  domainName         String          @unique
  verificationToken  String?
  verificationStatus String          @default("Pending")
  dkimTokens         String[]
  createdAt          DateTime        @default(now())
  verifiedAt         DateTime?
  deletedAt          DateTime?
  dkimRecords        Json            @default("[]")
  tenant             Tenant          @relation(fields: [tenantId], references: [id])
  emailIdentities    EmailIdentity[]
}

model EmailIdentity {
  id                 String         @id @default(uuid())
  domainId           String
  emailAddress       String         @unique
  verificationStatus String         @default("Pending")
  createdAt          DateTime       @default(now())
  verifiedAt         DateTime?
  deletedAt          DateTime?
  domain             DomainIdentity @relation(fields: [domainId], references: [id])
}

model Variable {
  id           String        @id @default(uuid())
  key          String
  defaultValue String?
  templateId   String
  template     EmailTemplate @relation(fields: [templateId], references: [id])
}

model EmailTemplate {
  id            String          @id @default(uuid())
  tenantId      String
  name          String
  subject       String
  body          String
  from_         String          @map("from")
  to            String
  createdAt     DateTime        @default(now())
  deletedAt     DateTime?
  bulkEmailJobs BulkEmailJob[]
  campaigns     EmailCampaign[]
  tenant        Tenant          @relation(fields: [tenantId], references: [id])
  variable      Variable[]
}

model EmailCampaign {
  id            String         @id @default(uuid())
  tenantId      String
  templateId    String
  scheduledAt   DateTime?
  createdAt     DateTime       @default(now())
  status        CampaignStatus @default(DRAFT)
  name          String
  description   String?
  campaign_type CampaignType
  bulkEmailJobs BulkEmailJob[]
  campaignLeads CampaignLead[]
  template      EmailTemplate  @relation(fields: [templateId], references: [id])
  tenant        Tenant         @relation(fields: [tenantId], references: [id])
  logs          EmailLog[]
}

model EmailLog {
  id              String          @id @default(uuid())
  tenantId        String
  campaignId      String
  leadId          String
  status          EmailStatus     @default(QUEUED)
  sentAt          DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?
  repliedAt       DateTime?
  createdAt       DateTime?       @db.Timestamptz(6)
  senderName      String?
  senderEmail     String?
  recipientEmails String[]
  subject         String?
  content         String?
  emailType       EmailType?      @default(MANUAL)
  campaign        EmailCampaign   @relation(fields: [campaignId], references: [id])
  lead            Lead            @relation(fields: [leadId], references: [id])
  tenant          Tenant          @relation(fields: [tenantId], references: [id])
  GeneratedEmail  GeneratedEmail?

  @@index([tenantId, status])
}

model BulkEmailJob {
  id              String             @id @default(uuid())
  tenantId        String
  templateId      String?
  campaignId      String?
  rateLimit       Int
  status          BulkEmailJobStatus @default(QUEUED)
  progress        Int                @default(0)
  total           Int                @default(0)
  nextProcessTime DateTime?
  createdAt       DateTime           @default(now())
  startedAt       DateTime?
  completedAt     DateTime?
  lastProcessedAt DateTime?
  campaign        EmailCampaign?     @relation(fields: [campaignId], references: [id])
  template        EmailTemplate?     @relation(fields: [templateId], references: [id], onDelete: Restrict)
  tenant          Tenant             @relation(fields: [tenantId], references: [id])
  jobLeads        BulkEmailJobLead[]

  @@index([tenantId, status])
  @@index([status, nextProcessTime])
}

model BulkEmailJobLead {
  id       String       @id @default(uuid())
  jobId    String
  leadId   String
  status   EmailStatus  @default(QUEUED)
  attempts Int          @default(0)
  sentAt   DateTime?
  job      BulkEmailJob @relation(fields: [jobId], references: [id])
  lead     Lead         @relation(fields: [leadId], references: [id])

  @@unique([jobId, leadId])
}

model LeadGenerationJob {
  id             String    @id @default(uuid())
  tenantId       String
  prompt         String?
  industry       String?
  location       String?
  status         String    @default("QUEUED")
  batchId        String?
  createdAt      DateTime  @default(now())
  completedAt    DateTime?
  totalRequested Int
  generatedCount Int       @default(0)
  urls           String[]  @default([])
  Lead           Lead[]
  tenant         Tenant    @relation(fields: [tenantId], references: [id])

  @@index([tenantId, status])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model BulkSnippet {
  id         String   @id(map: "bulk_snippet_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id  String
  text       String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  Tenant     Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bulk_snippet_tenant_id_fkey")
}

model CompanyProfile {
  id                   String      @id(map: "company_profile_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id            String      @unique(map: "company_profile_tenant_id_key")
  description          String?
  mission              String?
  values               String?
  usp                  String?
  history              String?
  key_personnel        String?
  created_at           DateTime    @default(now()) @db.Timestamptz(6)
  updated_at           DateTime    @default(now()) @db.Timestamptz(6)
  offering_description String?
  target_market        String?
  Tenant               Tenant      @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "company_profile_tenant_id_fkey")
  CompanyQA            CompanyQA[]
  Product              Product[]
}

model CompanyQA {
  id             String         @id(map: "company_qa_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id     String         @db.Uuid
  question       String
  answer         String
  category       String?
  CompanyProfile CompanyProfile @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "company_qa_company_id_fkey")

  @@index([company_id, category], map: "idx_company_qa_company_category")
}

model KnowledgeDocument {
  id             String    @id(map: "knowledge_document_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id      String
  file_key       String
  filename       String
  mime_type      String
  size_bytes     Int?
  status         String    @default("UPLOADED")
  extracted_text String?
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  processed_at   DateTime? @db.Timestamptz(6)
  Tenant         Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "knowledge_document_tenant_id_fkey")

  @@index([tenant_id, status], map: "idx_knowledge_document_status")
}

model PaymentTransaction {
  id             String       @id @default(dbgenerated("(gen_random_uuid())::text"))
  tenantId       String
  subscriptionId String
  phonepeOrderId String
  amount         Int
  status         String       @default("INITIATED")
  createdAt      DateTime     @default(now()) @db.Timestamptz(6)
  Subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_paymenttransaction_subscription")
  Tenant         Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_paymenttransaction_tenant")
}

model Product {
  id              String         @id(map: "product_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id      String         @db.Uuid
  name            String         @db.VarChar(120)
  category        String?
  description     String?
  features        String?
  benefits        String?
  pricing         String?
  target_audience String?
  use_cases       String?
  created_at      DateTime       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime       @default(now()) @db.Timestamptz(6)
  CompanyProfile  CompanyProfile @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_company_id_fkey")
  ProductQA       ProductQA[]
}

model ProductQA {
  id         String  @id(map: "product_qa_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_id String  @db.Uuid
  question   String
  answer     String
  Product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_qa_product_id_fkey")
}

model WebsiteContent {
  id            String    @id(map: "website_content_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id     String
  url           String
  title         String?
  status        String    @default("PENDING")
  crawl_summary String?
  added_at      DateTime  @default(now()) @db.Timestamptz(6)
  finished_at   DateTime? @db.Timestamptz(6)
  Tenant        Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "website_content_tenant_id_fkey")

  @@index([tenant_id, status], map: "idx_website_content_status")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TenantRAG {
  id         String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id  String
  source     String
  sourceId   String
  embedding  Unsupported("vector")?
  created_at DateTime               @default(now()) @db.Timestamptz(6)

  @@unique([tenant_id, source, sourceId], map: "tenantrag_unique_tenant_source_sourceid")
  @@index([embedding])
  @@index([tenant_id], map: "idx_tenant_rag_tenant_id")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Feedback {
  id         String           @id @default(dbgenerated("(gen_random_uuid())::text"))
  tenant_id  String
  name       String
  email      String?
  category   FeedbackCategory @default(GENERAL_COMMENT)
  rating     Int?
  page       String?
  message    String
  created_at DateTime         @default(now()) @db.Timestamptz(6)
  Tenant     Tenant           @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_feedback_tenant")

  @@index([tenant_id, category], map: "idx_feedback_tenant_category")
  @@index([tenant_id, created_at], map: "idx_feedback_tenant_created_at")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TenantOnboarding {
  tenant_id     String             @id
  role          OnboardingRole
  hear_about_us AcquisitionChannel
  primary_goal  SalesGoal
  createdat     DateTime           @default(now()) @db.Timestamptz(6)
  updated_at    DateTime           @default(now()) @db.Timestamptz(6)
  Tenant        Tenant             @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model WaitListMembers {
  id              String   @id(map: "wait_list_members_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  email           String   @unique(map: "wait_list_members_email_key")
  whatsapp_number String
  created_at      DateTime @default(now()) @db.Timestamptz(6)
}

model GeneratedEmail {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  emailLogId    String    @unique
  subject       String
  content       String
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  scheduledDate DateTime? @db.Timestamp(6)
  EmailLog      EmailLog  @relation(fields: [emailLogId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum PlanType {
  FREE
  PRO
  GROWTH
  STARTER
}

enum UserRole {
  SUPERADMIN
  ADMIN
  MANAGER
}

enum LeadStatus {
  NOT_INTERESTED
  FOLLOW_UP
  INTERESTED
  IMMEDIATE_ACTION
}

enum EmailStatus {
  QUEUED
  SENT
  OPENED
  CLICKED
  REPLIED
  BOUNCED
  FAILED
}

enum BulkEmailJobStatus {
  QUEUED
  PROCESSING
  COMPLETED
  PAUSED
  FAILED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ZoneCode {
  IN
  US
  EU
  AE
  ROW
}

enum MeterMetric {
  JOB
  CLASSIFICATION
  SEAT
}

enum CapPeriod {
  DAY
  MONTH
  PERIOD
}

enum BillingCadence {
  MONTHLY
  YEARLY
}

enum Experiment {
  PUBLIC
  A
  B
  C
}

enum CampaignType {
  COLD_OUTREACH
  FOLLOW_UP_SEQUENCE
  LEAD_NURTURING
  RE_ENGAGEMENT
}

enum crawl_status {
  PENDING
  CRAWLING
  READY
  ERROR
}

enum document_status {
  UPLOADED
  PROCESSING
  READY
  ERROR
}

enum lead_source {
  AI_GENERATED
  CSV_UPLOAD
  MANUAL_ENTRY
}

enum AcquisitionChannel {
  GOOGLE_SEARCH
  SOCIAL_MEDIA
  REFERRAL
  ADVERTISEMENT
  BLOG
  OTHER
}

enum FeedbackCategory {
  BUG_REPORT
  FEATURE_REQUEST
  GENERAL_COMMENT
  TESTIMONIAL
  OTHER
}

enum OnboardingRole {
  FOUNDER_CEO
  SALES_MANAGER
  MARKETING_MANAGER
  BUSINESS_DEV
  OTHER
}

enum SalesGoal {
  INCREASE_LEADS
  IMPROVE_CONVERSION
  AUTOMATE_PROCESS
  BETTER_TRACKING
  TEAM_COLLABORATION
}

enum EmailType {
  MANUAL
  AI_GENERATED
  TEMPLATE
}
