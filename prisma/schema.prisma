generator client {
  provider = "prisma-client-py"
  binaryTargets = ["native"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Plan {
  id       String        @id @default(uuid())
  code     String        @unique
  name     String
  versions PlanVersion[]
}

model PlanVersion {
  id             String         @id @default(uuid())
  planId         String
  version        Int
  zone           ZoneCode
  bucket         Experiment
  cadence        BillingCadence
  currency       String
  basePriceCents Int
  createdAt      DateTime       @default(now())
  components     Component[]
  Plan           Plan           @relation(fields: [planId], references: [id])
  prices         PriceId[]

  @@unique([planId, zone, bucket, cadence, version])
}

model Component {
  id            String      @id @default(uuid())
  planVersionId String
  metric        MeterMetric
  includedQty   Int
  capPeriod     CapPeriod
  overageCents  Int
  PlanVersion   PlanVersion @relation(fields: [planVersionId], references: [id])
}

model PriceId {
  id              String      @id @default(uuid())
  planVersionId   String
  gateway         String
  price           String
  externalPriceId String
  PlanVersion     PlanVersion @relation(fields: [planVersionId], references: [id])
}

model Tenant {
  id             String              @id @default(uuid())
  name           String
  plan           PlanType            @default(FREE)
  createdAt      DateTime            @default(now())
  countryCode    String?
  zone           ZoneCode            @default(IN)
  deletedAt      DateTime?
  bulkEmailJobs  BulkEmailJob[]
  DomainIdentity DomainIdentity[]
  campaigns      EmailCampaign[]
  emailLogs      EmailLog[]
  templates      EmailTemplate[]
  leads          Lead[]
  jobs           LeadGenerationJob[]
  users          User[]
}

model Subscription {
  id            String   @id @default(uuid())
  tenantId      String
  planVersionId String
  zone          ZoneCode
  status        String
  currentStart  DateTime
  currentEnd    DateTime
  brokerId      String?
}

model UsageEvent {
  id         BigInt      @id @default(autoincrement())
  tenantId   String
  metric     MeterMetric
  qty        Int
  recordedAt DateTime    @default(now())

  @@index([tenantId, recordedAt])
}

model DailyCapCounter {
  tenantId String
  date     DateTime
  metric   MeterMetric
  qty      Int

  @@id([tenantId, date, metric])
}

model CampaignLead {
  id         String        @id @default(uuid())
  campaignId String
  leadId     String
  createdAt  DateTime      @default(now())
  campaign   EmailCampaign @relation(fields: [campaignId], references: [id])
  lead       Lead          @relation(fields: [leadId], references: [id])

  @@unique([campaignId, leadId])
}

model User {
  id           String    @id @default(uuid())
  tenantId     String
  email        String    @unique
  passwordHash String
  role         UserRole  @default(MANAGER)
  verified     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  tenant       Tenant    @relation(fields: [tenantId], references: [id])
}

model Lead {
  id                String             @id @default(uuid())
  tenantId          String
  companyName       String
  contactEmail      String[]
  contactName       String?
  contactPhone      String[]
  status            LeadStatus         @default(FOLLOW_UP)
  confidence        Float?
  metadata          Json?
  createdAt         DateTime           @default(now())
  deletedAt         DateTime?
  contactAddress    String[]
  bulkEmailJobLeads BulkEmailJobLead[]
  campaignLeads     CampaignLead[]
  emailLogs         EmailLog[]
  tenant            Tenant             @relation(fields: [tenantId], references: [id])

  @@index([tenantId, status])
}

model DomainIdentity {
  id                 String          @id @default(uuid())
  tenantId           String
  domainName         String          @unique
  verificationToken  String?
  verificationStatus String          @default("Pending")
  dkimTokens         String[]
  createdAt          DateTime        @default(now())
  verifiedAt         DateTime?
  deletedAt          DateTime?
  tenant             Tenant          @relation(fields: [tenantId], references: [id])
  emailIdentities    EmailIdentity[]
}

model EmailIdentity {
  id                 String         @id @default(uuid())
  domainId           String
  emailAddress       String         @unique
  verificationStatus String         @default("Pending")
  createdAt          DateTime       @default(now())
  verifiedAt         DateTime?
  deletedAt          DateTime?
  domain             DomainIdentity @relation(fields: [domainId], references: [id])
}

model Variable {
  id           String        @id @default(uuid())
  key          String
  defaultValue String?
  templateId   String
  template     EmailTemplate @relation(fields: [templateId], references: [id])
}

model EmailTemplate {
  id            String          @id @default(uuid())
  tenantId      String
  name          String
  subject       String
  body          String
  from_         String          @map("from")
  to            String
  createdAt     DateTime        @default(now())
  deletedAt     DateTime?
  bulkEmailJobs BulkEmailJob[]
  campaigns     EmailCampaign[]
  tenant        Tenant          @relation(fields: [tenantId], references: [id])
  variable      Variable[]
}

model EmailCampaign {
  id            String         @id @default(uuid())
  tenantId      String
  templateId    String
  scheduledAt   DateTime?
  createdAt     DateTime       @default(now())
  status        CampaignStatus @default(DRAFT)
  bulkEmailJobs BulkEmailJob[]
  campaignLeads CampaignLead[]
  template      EmailTemplate  @relation(fields: [templateId], references: [id])
  tenant        Tenant         @relation(fields: [tenantId], references: [id])
  logs          EmailLog[]
}

model EmailLog {
  id         String        @id @default(uuid())
  tenantId   String
  campaignId String
  leadId     String
  status     EmailStatus   @default(QUEUED)
  sentAt     DateTime?
  openedAt   DateTime?
  clickedAt  DateTime?
  repliedAt  DateTime?
  campaign   EmailCampaign @relation(fields: [campaignId], references: [id])
  lead       Lead          @relation(fields: [leadId], references: [id])
  tenant     Tenant        @relation(fields: [tenantId], references: [id])

  @@index([tenantId, status])
}

model BulkEmailJob {
  id              String             @id @default(uuid())
  tenantId        String
  templateId      String
  campaignId      String?
  rateLimit       Int
  status          BulkEmailJobStatus @default(QUEUED)
  progress        Int                @default(0)
  total           Int                @default(0)
  nextProcessTime DateTime?
  createdAt       DateTime           @default(now())
  startedAt       DateTime?
  completedAt     DateTime?
  lastProcessedAt DateTime?
  campaign        EmailCampaign?     @relation(fields: [campaignId], references: [id])
  template        EmailTemplate      @relation(fields: [templateId], references: [id])
  tenant          Tenant             @relation(fields: [tenantId], references: [id])
  jobLeads        BulkEmailJobLead[]

  @@index([tenantId, status])
  @@index([status, nextProcessTime])
}

model BulkEmailJobLead {
  id       String       @id @default(uuid())
  jobId    String
  leadId   String
  status   EmailStatus  @default(QUEUED)
  attempts Int          @default(0)
  sentAt   DateTime?
  job      BulkEmailJob @relation(fields: [jobId], references: [id])
  lead     Lead         @relation(fields: [leadId], references: [id])

  @@unique([jobId, leadId])
}

model LeadGenerationJob {
  id             String    @id @default(uuid())
  tenantId       String
  prompt         String?
  industry       String?
  location       String?
  status         String    @default("QUEUED")
  batchId        String?
  createdAt      DateTime  @default(now())
  completedAt    DateTime?
  totalRequested Int
  generatedCount Int       @default(0)
  urls           String[]  @default([])
  tenant         Tenant    @relation(fields: [tenantId], references: [id])

  @@index([tenantId, status])
}

enum PlanType {
  FREE
  PRO
  ENTERPRISE
}

enum UserRole {
  SUPERADMIN
  ADMIN
  MANAGER
}

enum LeadStatus {
  NOT_INTERESTED
  FOLLOW_UP
  INTERESTED
  IMMEDIATE_ACTION
}

enum EmailStatus {
  QUEUED
  SENT
  OPENED
  CLICKED
  REPLIED
  BOUNCED
  FAILED
}

enum BulkEmailJobStatus {
  QUEUED
  PROCESSING
  COMPLETED
  PAUSED
  FAILED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ZoneCode {
  IN
  US
  EU
  AE
  ROW
}

enum MeterMetric {
  JOB
  CLASSIFICATION
  SEAT
}

enum CapPeriod {
  DAY
  MONTH
  PERIOD
}

enum BillingCadence {
  MONTHLY
  YEARLY
}

enum Experiment {
  PUBLIC
  A
  B
  C
}
